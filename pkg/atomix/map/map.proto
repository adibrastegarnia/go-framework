// Copyright 2019-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package atomix.map;

// Map snapshot
message MapSnapshot {
    map<string, MapEntryValue> entries = 1;
}

// Map entry value
message MapEntryValue {
    uint64 version = 1;
    bytes value = 2;
    int64 created = 3;
    int64 ttl = 4;
}

message ContainsKeyRequest {
    string key = 1;
}

message ContainsKeyResponse {
    bool contains_key = 1;
}

message SizeRequest {

}

message SizeResponse {
    int32 size = 1;
}

message KeysRequest {

}

message KeysResponse {
    string key = 1;
}

message EntriesRequest {

}

message EntriesResponse {
    string key = 1;
    bytes value = 2;
    uint64 version = 3;
}

message PutRequest {
    string key = 1;
    bytes value = 2;
    uint64 version = 3;
    int64 ttl = 4;
    bool if_empty = 5;
}

message PutResponse {
    UpdateStatus status = 1;
    bytes previous_value = 2;
    uint64 previous_version = 3;
    uint64 new_version = 4;
}

message ReplaceRequest {
    string key = 1;
    bytes previous_value = 2;
    uint64 previous_version = 3;
    bytes new_value = 4;
    int64 ttl = 5;
}

message ReplaceResponse {
    UpdateStatus status = 1;
    bytes previous_value = 2;
    uint64 previous_version = 3;
    uint64 new_version = 4;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    bytes value = 1;
    uint64 version = 2;
}

message RemoveRequest {
    string key = 1;
    bytes value = 2;
    uint64 version = 3;
}

message RemoveResponse {
    UpdateStatus status = 1;
    bytes previous_value = 2;
    uint64 previous_version = 3;
}

message ClearRequest {
}

message ClearResponse {
}

message ListenRequest {

}

message ListenResponse {
    Type type = 1;
    string key = 2;
    bytes old_value = 3;
    uint64 old_version = 4;
    bytes new_value = 5;
    uint64 new_version = 6;

    enum Type {
        INSERTED = 0;
        UPDATED = 1;
        REMOVED = 2;
    }
}

message UnlistenRequest {
    int64 stream_id = 1;
}

message UnlistenResponse {
}

enum UpdateStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}
