/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package atomix.service;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

message ServiceId {
    string type = 1;
    string name = 2;
    string namespace = 3;
}

message ServiceSnapshot {
    uint64 index = 1;
    bytes snapshot = 2;
}

// Simple service snapshot
message SimpleServiceSnapshot {
    int64 index = 4;
    google.protobuf.Timestamp timestamp = 5 [(gogoproto.stdtime) = true];
}

message ServiceRequest {
    ServiceId id = 1;
    oneof request {
        CreateRequest create = 2;
        DeleteRequest delete = 3;
        MetadataRequest metadata = 4;
        bytes command = 5;
        bytes query = 6;
    }
}

message ServiceResponse {
    oneof response {
        CreateResponse create = 1;
        DeleteResponse delete = 2;
        MetadataResponse metadata = 3;
        bytes command = 4;
        bytes query = 5;
    }
}

message CreateRequest {

}

message CreateResponse {

}

message DeleteRequest {

}

message DeleteResponse {

}

message MetadataRequest {
    string type = 1;
    string namespace = 2;
}

message MetadataResponse {
    repeated ServiceId services = 1;
}

message CommandRequest {
    RequestContext context = 1;
    string name = 2;
    bytes command = 3;
}

message CommandResponse {
    ResponseContext context = 1;
    bytes output = 2;
}

message QueryRequest {
    RequestContext context = 1;
    string name = 2;
    bytes query = 3;
}

message QueryResponse {
    ResponseContext context = 1;
    bytes output = 2;
}

message RequestContext {
    uint64 index = 1;
}

message ResponseContext {
    uint64 index = 1;
    ResponseType type = 2;
}

enum ResponseType {
    RESPONSE = 0;
    OPEN_STREAM = 1;
    CLOSE_STREAM = 2;
}
