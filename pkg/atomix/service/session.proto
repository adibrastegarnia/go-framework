// Copyright 2019-present Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package atomix.service;

// Sessionized service snapshot
message SessionizedServiceSnapshot {
    repeated SessionSnapshot sessions = 1;
}

// Service session
message SessionSnapshot {
    uint64 session_id = 1;
    uint64 timeout = 2;
    uint64 timestamp = 3;
    uint64 command_sequence = 4;
    uint64 last_applied = 5;
    repeated SessionStreamSnapshot streams = 6;
}

// Service session stream
message SessionStreamSnapshot {
    uint64 stream_id = 1;
    string type = 2;
    uint64 sequence_number = 3;
    uint64 last_completed = 4;
}

message SessionRequest {
    oneof request {
        OpenSessionRequest open_session = 1;
        KeepAliveRequest keep_alive = 2;
        CloseSessionRequest close_session = 3;
        SessionCommandRequest command = 4;
        SessionQueryRequest query = 5;
    }
}

message SessionResponse {
    oneof response {
        OpenSessionResponse open_session = 1;
        KeepAliveResponse keep_alive = 2;
        CloseSessionResponse close_session = 3;
        SessionCommandResponse command = 4;
        SessionQueryResponse query = 5;
    }
}

message OpenSessionRequest {
    int64 timeout = 1;
}

message OpenSessionResponse {
    uint64 session_id = 1;
}

message KeepAliveRequest {
    uint64 session_id = 1;
    uint64 command_sequence = 2;
    map<uint64, uint64> streams = 3;
}

message KeepAliveResponse {
}

message CloseSessionRequest {
    uint64 session_id = 1;
}

message CloseSessionResponse {

}

message SessionCommandRequest {
    SessionCommandContext context = 1;
    string name = 2;
    bytes input = 3;
}

message SessionCommandResponse {
    SessionResponseContext context = 1;
    bytes output = 2;
}

message SessionQueryRequest {
    SessionQueryContext context = 1;
    string name = 2;
    bytes input = 3;
}

message SessionQueryResponse {
    SessionResponseContext context = 1;
    bytes output = 2;
}

message SessionCommandContext {
    uint64 session_id = 1;
    uint64 sequence_number = 2;
}

message SessionQueryContext {
    uint64 session_id = 1;
    uint64 last_sequence_number = 2;
    uint64 last_index = 3;
}

message SessionResponseContext {
    uint64 stream_id = 1;
    uint64 index = 2;
    uint64 sequence = 3;
}

message PrimitiveEvent {
    string type = 1;
    bytes value = 2;
}
